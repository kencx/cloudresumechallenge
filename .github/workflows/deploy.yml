name: Deployment
on:
  push:
    branches:
      - master
  pull_request:

jobs:
  filter:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      infra: ${{ steps.filter.outputs.infra }}
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v2

      - name: Paths filter
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            frontend:
              - 'site/docs/**'
            infra:
              - 'api/**'
              - './*.tf'

  plan:
    needs: filter
    if: ${{ needs.filter.outputs.infra == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "ap-southeast-1"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform init
        id: init
        run: terraform init

      - name: Terraform validate
        id: validate
        run: terraform validate -no-color

      # TODO: create plan output artifact
      - name: Terraform plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false -var-file=auto.tfvars
        env:
          TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_TOKEN }}
        continue-on-error: true

      - name: Write on pull request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `
            Author: @${{ github.actor }}, Action: \`${{ github.event_name }}\`
            #### Terraform Format \`${{ steps.fmt.outcome }}\`
            #### Terraform Init \`${{ steps.init.outcome }}\`
            #### Terraform Plan \`${{ steps.plan.outcome }}\`
            #### Terraform Validation \`${{ steps.validate.outcome }}\`

            <details><summary>Plan Output</summary>

            \`\`\`terraform
            ${process.env.PLAN}
            \`\`\`
            \n
            </details>
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  apply:
    needs: [filter, plan]
    if: |
      github.ref == 'refs/heads/master' &&
      github.event_name == 'push' &&
      (needs.filter.outputs.infra == 'true' && needs.plan.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "ap-southeast-1"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform init
        id: init
        run: terraform init

      # TODO: use plan output artifact
      - name: Terraform apply
        run: terraform apply -auto-approve -input=false -var-file=auto.tfvars
        env:
          TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_TOKEN }}

  upload:
    needs: [filter, apply]
    if: |
      always() &&
      (needs.apply.result == 'skipped' && needs.filter.outputs.frontend == 'true') ||
      (needs.apply.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "ap-southeast-1"

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 14

      - name: Install dependencies
        run: npm ci
        working-directory: ./site

      - name: Build CSS files
        run: npm run build
        working-directory: ./site

      - name: Upload to S3
        run: |
          aws s3 sync ./site/docs/ s3://${{ secrets.AWS_S3_BUCKET }}

